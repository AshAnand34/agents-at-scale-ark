name: 'Deploy - AWS'

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  check_version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.ark_version.outputs.version }}
      clean_version: ${{ steps.ark_version.outputs.clean_version }}
      sha: ${{ steps.get_sha.outputs.sha }}
      has_version: ${{ steps.check_tag.outputs.has_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Determine ARK version to deploy
        id: ark_version
        run: |
            if [ -n "${{ github.event.inputs.ark_version }}" ]; then
            INPUT_VERSION="${{ github.event.inputs.ark_version }}"
            # Ensure version starts with 'v' for git tag lookup
            if [[ "$INPUT_VERSION" =~ ^v ]]; then
                VERSION="$INPUT_VERSION"
            else
                VERSION="v$INPUT_VERSION"
            fi
            echo "Using specified version: $VERSION"
            else
            VERSION="v$(cat version.txt | tr -d '\n')"
            echo "Using version from version.txt: $VERSION"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "clean_version=$(echo $VERSION | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        id: check_tag
        run: |
            VERSION="${{ steps.ark_version.outputs.version }}"
            if git rev-parse --verify "$VERSION" >/dev/null 2>&1; then
            echo "has_version=true" >> $GITHUB_OUTPUT
            echo "Version tag $VERSION exists"
            else
            echo "has_version=false" >> $GITHUB_OUTPUT
            echo "Version tag $VERSION does not exist"
            fi

      - name: Get SHA for version tag
        id: get_sha
        if: steps.check_tag.outputs.has_version == 'true'
        run: |
            VERSION="${{ steps.ark_version.outputs.version }}"
            SHA=$(git rev-list -n 1 "$VERSION")
            echo "sha=$SHA" >> $GITHUB_OUTPUT
            echo "Using SHA $SHA for version $VERSION"

  build:
    runs-on: ubuntu-latest
    needs: [check_version]
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.check_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for distribution environment deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.33.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GH_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 1200

      - name: Update kubeconfig for AWS EKS
        run: |
          aws eks update-kubeconfig --name ${{ vars.AWS_EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }} 
      
      - name: Grant kubectl access
        run: |
          ./scripts/deploy/bind-deployer-role.sh "${{ github.repository }}" 

      - name: Download ARK Helm chart from release
        run: |
          VERSION="${{ needs.check_version.outputs.version }}"
          CLEAN_VERSION="${{ needs.check_version.outputs.clean_version }}"
          echo "Downloading ARK Helm chart for version: $VERSION"
          
          # Download the specific chart version
          gh release download "$VERSION" --pattern "ark-${CLEAN_VERSION}.tgz" --repo McK-Internal/agents-at-scale
          
          echo "Downloaded chart:"
          ls -la ark-${CLEAN_VERSION}.tgz
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check Currently Deployed ARK Status
        run: |
          helm status ark-controller -n ark-system || echo "No existing ARK release found - this is expected for fresh deployments"

      - name: Create namespace with Pod Security Standards
        run: |
          # Create namespace with Pod Security Standards labels to satisfy admission controllers
          kubectl create namespace ark-system --dry-run=client -o yaml | \
          kubectl patch -f - --local --type=merge -p='{
            "metadata": {
              "labels": {
                "pod-security.kubernetes.io/enforce": "baseline",
                "pod-security.kubernetes.io/audit": "baseline", 
                "pod-security.kubernetes.io/warn": "baseline"
              }
            }
          }' --dry-run=client -o yaml | kubectl apply -f -

      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update  
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set crds.enabled=true
 
      - name: Install Gateway API CRDs
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml

      - name: Deploy ARK chart to Environment
        run: |
          # Deploy using helm with registry configuration
          helm upgrade --install ark-controller ./ark-${{ needs.check_version.outputs.clean_version }}.tgz \
            --namespace ark-system \
            --set controllerManager.container.image.repository=${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}/ark-controller \
            --set controllerManager.container.image.tag=${{ needs.check_version.outputs.clean_version }} \
            --set controllerManager.serviceAccountName=ark-controller \
            --set containerRegistry.enabled=true \
            --set containerRegistry.server=${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }} \
            --set containerRegistry.username=${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }} \
            --set containerRegistry.password=${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }} \
            --set rbac.enable=false \
            --timeout=5m
            
          # Wait for deployment readiness
          ./scripts/deploy/wait-for-deployment.sh ark-controller ark-system 600
            
          echo "ARK ${{ needs.check_version.outputs.version }} deployed successfully to Distribution Environment"
          
      - name: Verify deployment
        run: |
          echo "ARK ${{ needs.check_version.outputs.version }} deployed successfully"
          kubectl get pods -n ark-system
          kubectl get deployments -n ark-system