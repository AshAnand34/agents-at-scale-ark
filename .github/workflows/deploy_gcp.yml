name: 'Deploy - GCP'

on:
  workflow_dispatch:
    inputs:
      ark_version:
        description: 'ARK version to deploy (e.g. "v0.1.19", blank for latest)'
        required: false
        type: string
        default: ''

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  resolve_version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.resolve.outputs.version }}
      clean_version: ${{ steps.resolve.outputs.clean_version }}
      sha: ${{ steps.resolve.outputs.sha }}
      has_version: ${{ steps.resolve.outputs.has_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve ARK version
        id: resolve
        uses: ./.github/actions/resolve-version
        with:
          ark_version: ${{ github.event.inputs.ark_version }}

  deploy:
    runs-on: ubuntu-latest
    needs: [resolve_version]
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.resolve_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for distribution environment deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.33.0"

      - name: Authenticate to GCP (Workload Identity)
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ vars.GCP_GKE_CLUSTER_NAME }}'
          location: '${{ vars.GCP_REGION }}'
      
      - name: Deploy ARK Helm Chart
        uses: ./.github/actions/deploy-ark-helmchart
        with:
          version: ${{ needs.resolve_version.outputs.version }}
          clean_version: ${{ needs.resolve_version.outputs.clean_version }}
          namespace: ark-system
          image_repository: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}/ark-controller
          container_registry_server: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}
          container_registry_username: ${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }}
          container_registry_password: ${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}
          rbac_enable: "true"
          timeout: "5m"
          install_cert_manager: "true"
          install_gateway_api: "true"
          apply_crds: "true"
          install_ingress: "true"
        env:
          GH_TOKEN: ${{ github.token }}
    
      - name: Deploy services
        shell: bash
        run: |
          set -euo pipefail
          SERVICES=(
            "ark-api"
            "ark-api-a2a"
            "ark-dashboard"
            "executor-langchain"
            "evaluator-llm"
            "postgres-memory"
          )

          for NAME in "${SERVICES[@]}"; do

            # compute image repository per service
            IMAGE_REPO_INPUT="${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}"
            if [ -n "${IMAGE_REPO_INPUT}" ]; then
              IMAGE_REPO="${IMAGE_REPO_INPUT}/${NAME}"
            else
              IMAGE_REPO="${NAME}"
            fi

            echo "=== Deploying ${NAME} ==="
            helm upgrade --install "${NAME}" "services/${NAME}/chart" \
              --namespace "default" \
              --create-namespace \
              --set app.image.repository="${IMAGE_REPO}" \
              --set app.image.tag="${{ needs.resolve_version.outputs.clean_version }}" \
              --set app.image.pullPolicy="IfNotPresent" \
              --wait \
              --timeout="10m"
          done

      - name: Verify deployment
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Checking deployment status ==="
          echo "ARK Controller:"
          if ! kubectl get pods -n ark-system -l control-plane=ark-controller; then
            echo "Controller not found, showing all ark-system pods:"
            kubectl get pods -n ark-system || true
          fi
          echo "ARK Services:"
          kubectl get pods -n "default" -l app=ark-api || true
          kubectl get pods -n "default" -l app=ark-api-a2a || true
          kubectl get pods -n "default" -l app=ark-dashboard || true
          echo "Service endpoints:"
          kubectl get svc -n "default" ark-api ark-api-a2a ark-dashboard || true

      - name: Setup ARK ingress
        shell: bash
        run: |
          set -euo pipefail
          # Create ingress resource for ARK services
          kubectl apply -f ark/scripts/ark_ingress.yml || true
          echo "Ingress controller deployed"


