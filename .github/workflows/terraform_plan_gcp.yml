name: 'Plan infrastructure - GCP'

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: ['main']
    paths:
      - 'infrastructure/providers/gcp/**'
      - '.github/workflows/terraform_plan_gcp.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  tfe-plan:
    runs-on: ${{ vars.GH_RUNNER_LABEL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP (Workload Identity)
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.13.1'

      - name: Terraform Init (GCS backend)
        id: init
        working-directory: ./infrastructure/providers/gcp
        run: |
          set -euo pipefail
          backend_args=(
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_GCP }}"
          )
          if [ -n "${{ secrets.TF_STATE_PREFIX_GCP }}" ]; then
            backend_args+=(-backend-config="prefix=${{ secrets.TF_STATE_PREFIX_GCP }}")
          fi
          if [ -n "${{ secrets.GCP_PROJECT_ID }}" ]; then
            backend_args+=(-backend-config="project=${{ secrets.GCP_PROJECT_ID }}")
          fi
          terraform init -input=false "${backend_args[@]}"

      - name: Terraform Validate
        id: validate
        working-directory: ./infrastructure/providers/gcp
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./infrastructure/providers/gcp
        run: |
          set -euo pipefail
          terraform plan -input=false -var="gcp_region=${{ vars.GCP_REGION }}" -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" | tee plan.log 
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
                })
            } else {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
            }