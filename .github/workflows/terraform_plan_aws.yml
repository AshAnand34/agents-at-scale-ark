name: 'Plan infrastructure - AWS'

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: ['main']
    paths:
        - 'infrastructure/aws/**'
        - '.github/workflows/terraform_plan_aws.yaml'

  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  tfe-plan:
    runs-on: ${{vars.GH_RUNNER_LABEL}}
    outputs:
      TF_PLAN_ID: ${{ steps.reference-plan-output.outputs.TF_PLAN_ID }}
      TF_PLAN_STATUS: ${{ steps.reference-plan-output.outputs.TF_PLAN_STATUS }}
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GH_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 1200

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.13.1'

      - name: Terraform Init (S3 backend)
        id: init
        working-directory: ./infrastructure/providers/aws
        run: |
          set -euo pipefail
          backend_args=(
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}"
            -backend-config="region=${{ vars.AWS_REGION }}"
            -backend-config="encrypt=true"
            -backend-config="key=${{ secrets.AWS_TF_STATE_KEY }}"
            )
          if [ -n "${{ secrets.AWS_TF_STATE_DYNAMODB_TABLE }}" ]; then
            backend_args+=(-backend-config="dynamodb_table=${{ secrets.AWS_TF_STATE_DYNAMODB_TABLE }}")
          fi
          terraform init -input=false "${backend_args[@]}"

      - name: Terraform Validate
        id: validate
        working-directory: ./infrastructure/providers/aws
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./infrastructure/providers/aws
        run: terraform plan -no-color -input=false -var="aws_region=${{ vars.AWS_REGION }}" -var="github_oidc_role_name=$(cut -d'/' -f2 <<<'${{ secrets.AWS_GH_OIDC_ROLE_ARN }}')" | tee plan.log
      
      - name: Update PR
        uses: actions/github-script@v7
        id: plan-comment
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Output')
            });
            const output = `#### Terraform Plan Output
            \`\`\`
            Plan: ${{ steps.plan.outputs.add }} to add, ${{ steps.plan.outputs.change }} to change, ${{ steps.plan.outputs.destroy }} to destroy.
            \`\`\`
            [Terraform Plan]
            `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
            github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
            });
            }
            github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
            });
